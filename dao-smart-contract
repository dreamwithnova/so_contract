// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DAO {
    struct Proposal {
        string description;
        uint256 deadline;
        uint256 votesFor;
        uint256 votesAgainst;
        bool executed;
        address proposer;
    }

    mapping(uint256 => Proposal) public proposals;
    mapping(address => uint256) public votingPower;
    uint256 public totalProposals;

    constructor() {
        // Initialize voting power for demonstration
        votingPower[msg.sender] = 1000; // Example: admin has 1000 votes
    }

    function createProposal(string memory description, uint256 duration) public {
        proposals[totalProposals] = Proposal({
            description: description,
            deadline: block.timestamp + duration,
            votesFor: 0,
            votesAgainst: 0,
            executed: false,
            proposer: msg.sender
        });
        totalProposals++;
    }

    function vote(uint256 proposalId, bool support) public {
        require(block.timestamp < proposals[proposalId].deadline, "Voting period has ended");
        require(votingPower[msg.sender] > 0, "No voting power");

        Proposal storage proposal = proposals[proposalId];

        if (support) {
            proposal.votesFor += votingPower[msg.sender];
        } else {
            proposal.votesAgainst += votingPower[msg.sender];
        }
    }

    function executeProposal(uint256 proposalId) public {
        Proposal storage proposal = proposals[proposalId];
        require(block.timestamp >= proposal.deadline, "Voting period not yet ended");
        require(!proposal.executed, "Proposal already executed");

        proposal.executed = true;
        if (proposal.votesFor > proposal.votesAgainst) {
            // Proposal logic (e.g., fund allocation)
        }
    }
}
